#Использовать logos

Перем _ПутьКФайлуПокрытия;
Перем _ФайлыЗамеров;
Перем _ПутьККаталогуИсходников;
Перем _ГенераторПутей;
Перем _Лог;

Функция ИмяЛога() Экспорт
	Возврат "perf-measurements-to-cover";
КонецФункции

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("i in", "" ,"Путь к файлам с замерами.
	|		Если указан каталог, то будут сконвертированы все файлы *.pff. Например ./perf/")
	.ТМассивСтрок()
	.Обязательный(Истина)
	.ВОкружении("PERF_MEASUREMENTS_PATH");

	Команда.Опция("o out", "" ,"Путь к файлу-результату. Например ./coverage/genericCoverage.xml")
	.ТСтрока()
	.Обязательный(Истина)
	.ВОкружении("COVERAGE_RESULT");

	Команда.Опция("s src", "" ,"Путь к каталогу с исходниками. Например ./src")
	.ТСтрока()
	.Обязательный(Истина)
	.ВОкружении("SRC");
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	ИнициализацияПараметров(Команда);
	
	ЗаписатьФайлПокрытия();
	
КонецПроцедуры

Процедура ИнициализацияПараметров(Знач Команда)

	_ПутьКФайлуПокрытия = Команда.ЗначениеОпции("out");
	путиКФайламЗамеров = Команда.ЗначениеОпции("in");
	путьККаталогуИсходников = Команда.ЗначениеОпции("src");
	
	_Лог = Логирование.ПолучитьЛог(ИмяЛога());

	_ГенераторПутей = Новый Путь1СПоМетаданным( путьККаталогуИсходников, _Лог );

	файл = Новый Файл( _ПутьКФайлуПокрытия );
	каталогФайлаПокрытия = Новый Файл( файл.Путь );

	Если Не каталогФайлаПокрытия.Существует() Тогда

		СоздатьКаталог( файл.Путь );

	КонецЕсли;

	_ФайлыЗамеров = Новый Массив;

	Для Каждого цПуть Из путиКФайламЗамеров Цикл

		файл = Новый Файл(цПуть);

		Если Не файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
			
		Если ВРег( файл.Расширение ) = ВРег( ".pff" ) Тогда

			_ФайлыЗамеров.Добавить(файл.ПолноеИмя);

		ИначеЕсли файл.ЭтоКаталог() Тогда

			Для каждого цФайлЗамеров Из НайтиФайлы( файл.ПолноеИмя, "*.pff" ) Цикл

				_ФайлыЗамеров.Добавить(цФайлЗамеров.ПолноеИмя);

			КонецЦикла;

		Иначе

			_Лог.Ошибка( "Это не файл замеров - %1", цПуть );

		КонецЕсли;

	КонецЦикла;

	Для каждого цФайлЗамеров Из _ФайлыЗамеров Цикл

		_Лог.Информация( "Добавлен к конвертации %1", цФайлЗамеров);

	КонецЦикла;
    
КонецПроцедуры

Процедура ЗаписатьФайлПокрытия()
	
	Запись = Новый ЗаписьXML();
	Запись.ОткрытьФайл( _ПутьКФайлуПокрытия );
	
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента( "coverage" );
	Запись.ЗаписатьАтрибут( "version", "1" );
	
	модули = ПрочитатьДанныеПокрытияИзКаталога();
	
	_Лог.Информация( "Прочитано %1 различных модулей", модули.Количество() );

	Для Каждого цМодуль Из модули Цикл
		
		путьКФайлу = _ГенераторПутей.Путь(цМодуль.Имя);
		
		всеСтрокиМодуляСКодом = ПолучитьСтрокиМодуля(путьКФайлу);
		
		Запись.ЗаписатьНачалоЭлемента("file");
		Запись.ЗаписатьАтрибут("path", путьКФайлу);
		
		Для Каждого цНомерСтроки Из всеСтрокиМодуляСКодом Цикл
			
			Запись.ЗаписатьНачалоЭлемента("lineToCover");
			Запись.ЗаписатьАтрибут("lineNumber", Формат( цНомерСтроки, "ЧГ=" ));
			Если цМодуль.Строки.Получить(цНомерСтроки) = Неопределено Тогда
				Запись.ЗаписатьАтрибут("covered", "false");
			Иначе
				Запись.ЗаписатьАтрибут("covered", "true");
			КонецЕсли;
			Запись.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		Запись.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.Закрыть();

	_Лог.Информация("Результаты конвертации записаны в %1", _ПутьКФайлуПокрытия);
	
КонецПроцедуры

#Область ЧтениеФайловЗамера

Функция ПрочитатьДанныеПокрытияИзКаталога()
	
	соотМодули = Новый Соответствие;
	
	Для каждого цФайлЗамера Из _ФайлыЗамеров Цикл
		
		Чтение = Новый ЧтениеТекста();
		Чтение.Открыть( цФайлЗамера );
		
		ПрочитатьПокрытиеИзДанныхФайла(соотМодули, Чтение.Прочитать());
		
		Чтение.Закрыть();
		
	КонецЦикла;
	
	Модули = Новый Массив;
	
	Для каждого цЭлемент Из соотМодули Цикл
		
		Модули.Добавить( цЭлемент.Значение );
		
	КонецЦикла;
	
	Возврат Модули;
	
КонецФункции

Процедура ПрочитатьПокрытиеИзДанныхФайла(Знач соотМодули, Знач ТекстФайлаЗамера)
	
	маркерНачалоИмениМодуля = "AAAAAAAAAAAAAAAAAAAAAAAAAAA=,""""},""";
	длинаНачалоИмениМодуля = СтрДлина( маркерНачалоИмениМодуля );
	
	маркерКонецИмениМодуля = """,";
	длинаКонецИмениМодуля = СтрДлина( маркерКонецИмениМодуля );
	
	маркерКонецНомераСтроки = ",";
	длинаКонецНомераСтроки = СтрДлина( маркерКонецНомераСтроки );
	
	указатель = 0;
	
	Пока Истина Цикл
		
		указатель = СтрНайти( ТекстФайлаЗамера, маркерНачалоИмениМодуля,, указатель + 1 );
		
		Если указатель = 0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
		конецИмени = СтрНайти( ТекстФайлаЗамера, маркерКонецИмениМодуля, , указатель );
		
		указатель = указатель + длинаНачалоИмениМодуля;
		
		имяМодуля = Сред( ТекстФайлаЗамера, указатель, конецИмени - указатель);
		
		Если СтрЗаканчиваетсяНа( имяМодуля, ".Форма" ) Тогда
			
			имяМодуля = имяМодуля + ".Модуль";
			
		КонецЕсли;
		
		указатель = конецИмени + длинаКонецИмениМодуля;
		
		конецНомераСтроки = СтрНайти( ТекстФайлаЗамера, маркерКонецНомераСтроки, , указатель );
		
		номерСтроки = Сред( ТекстФайлаЗамера, указатель, конецНомераСтроки - указатель );
		
		параметрыМодуля = соотМодули.Получить( имяМодуля );
		
		Если параметрыМодуля = Неопределено Тогда
			
			параметрыМодуля = Новый Структура;
			параметрыМодуля.Вставить( "Имя", имяМодуля );
			параметрыМодуля.Вставить( "Строки", Новый Соответствие );
			
			соотМодули.Вставить( имяМодуля, параметрыМодуля );
			
		КонецЕсли;
		
		от = Новый ОписаниеТипов( "Число", Новый КвалификаторыЧисла( 10, 0, ДопустимыйЗнак.Любой ) );
		
		номерСтроки = от.ПривестиЗначение( номерСтроки );
		
		параметрыМодуля.Строки.Вставить( номерСтроки, Истина );
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СтрокиКода

Функция ПолучитьСтрокиМодуля( Знач Путь)
	
	СтрокиМодуля = Новый Массив();
	
	Чтение = Новый ЧтениеТекста();
	Чтение.Открыть(Путь);
	
	предСтрока = "";
	ТекстСтроки = Чтение.ПрочитатьСтроку();
	
	НомерСтроки = 1;
	
	Пока НЕ ТекстСтроки = Неопределено Цикл
		
		Если ЕстьКодВСтроке(ТекстСтроки, предСтрока)Тогда
			
			СтрокиМодуля.Добавить(НомерСтроки);
			
		КонецЕсли;
		
		предСтрока = ТекстСтроки;
		
		ТекстСтроки = Чтение.ПрочитатьСтроку();
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Возврат СтрокиМодуля;
	
КонецФункции

Функция ЕстьКодВСтроке(Знач пСтрокаКода, Знач пПредСтрока)
	
	строкаКода = СокрЛП(пСтрокаКода);
	
	Если НЕ ЗначениеЗаполнено(строкаКода) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	массивИсключений = Новый Массив;
	массивИсключений.Добавить( "//" );
	массивИсключений.Добавить( "#" );
	массивИсключений.Добавить( "&" );
	массивИсключений.Добавить( "Процедура" );
	массивИсключений.Добавить( "КонецПроцедуры" );
	массивИсключений.Добавить( "Функция" );
	массивИсключений.Добавить( "КонецФункции" );
	массивИсключений.Добавить( "Иначе" );
	массивИсключений.Добавить( "КонецЕсли" );
	массивИсключений.Добавить( "Попытка" );
	массивИсключений.Добавить( "Исключение" );
	массивИсключений.Добавить( "КонецПопытки" );
	
	Для каждого цИсключение Из массивИсключений Цикл
		
		Если СтрНачинаетсяС( строкаКода, цИсключение ) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаЗаканчиваетсяПереносом( пПредСтрока ) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ СтрНачинаетсяС( строкаКода, "|" ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КоличествоДвойныхКавычек = СтрЧислоВхождений(строкаКода, """""");
	
	Пока КоличествоДвойныхКавычек > 0 Цикл
		строкаКода = СтрЗаменить(строкаКода, """""", "");
		КоличествоДвойныхКавычек = СтрЧислоВхождений(строкаКода, """""");
	КонецЦикла;
	
	Возврат (СтрЧислоВхождений(строкаКода, """") > 0);
	
КонецФункции

Функция СтрокаЗаканчиваетсяПереносом( Знач пСтрока )
	
	строкаКода = СокрЛП(пСтрока);
	
	Если НЕ ЗначениеЗаполнено(строкаКода) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не СтрЗаканчиваетсяНа( пСтрока, ";" );
	
КонецФункции

#КонецОбласти


